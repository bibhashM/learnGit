counting set bits:

//comparing the last bits 2 = 10, so first check 0, then right shift, then n&1 again.

vector<int> countingbits(int n)
{
	vector<int> ans;
	for(int i=0; i<n; i++){
		int num=i, count=0;
		while(num > 0){
			if(num & 1){
				count++;
			}
			num = num >> 1;
		}
		ans[i]=count;
	}
	

}

****************


make mattrix zero:

for(int i = 0; i < n; i++) {
		for(int j = 0; j < m; j++) {
			
			// If that element of the matrix is equal to 0.
			if(matrix[i][j] == 0) {
				
				// Traversing its complete column and setting all the isZero values to be true.
				for(int k = 0; k < n; k++) {
					isZero[k][j] = true;
				}
				
				// Traversing its complete row and setting all the isZero values to be true.
				for(int k = 0; k < m; k++) {
					isZero[i][k] = true;
				}
			}
		}
	}
	
	// Travrsing isZero and if isZero at an index is true then we replace that element with zero in original matrix.
	for(int i = 0; i < n; i++) {
		for(int j = 0; j < m; j++) {
			if(isZero[i][j]) {
				matrix[i][j] = 0;
			}
		}
	}


***************


Encrypt using pascal's inverted traignle:

	1  2  3
	3  5  pop_back last element

string decrypt(vector<int> &nums) {

	if(nums[0]==0 && nums[1] ==0)
		return "00";
	else if (nums[0]==0)
		return "0" + to_string(nums[1]);
	else
		return to_string(nums[0]) + to_string(nums[1]);
	
	for(int i = nums.begin(); i= nums.end(); i++){
		nums[i] = (nums[i] + nums[i+1]) % 10;
	}

	nums.pop_back();

	return decrypt(nums);

}

****************

